"""removed keyword rank model

Revision ID: c6d054c89e08
Revises: 
Create Date: 2025-07-07 23:24:46.377094

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6d054c89e08'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_keyword_rankings_id'), table_name='keyword_rankings')
    op.drop_table('keyword_rankings')
    op.add_column('keywords', sa.Column('keyword_difficulty', sa.String(length=20), nullable=True))
    op.add_column('keywords', sa.Column('competitive_density', sa.String(length=20), nullable=True))
    op.add_column('keywords', sa.Column('intent', sa.String(length=30), nullable=True))
    op.alter_column('keywords', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('keywords', 'search_volume',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.drop_column('keywords', 'url_ranking')
    op.drop_column('keywords', 'created_at')
    op.drop_column('keywords', 'difficulty')
    op.drop_column('keywords', 'updated_at')
    op.drop_column('keywords', 'is_tracking')
    op.drop_column('keywords', 'cpc')
    op.drop_column('keywords', 'target_position')
    op.drop_column('keywords', 'current_position')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('keywords', sa.Column('current_position', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('target_position', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('cpc', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('is_tracking', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('difficulty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('keywords', sa.Column('url_ranking', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.alter_column('keywords', 'search_volume',
               existing_type=sa.String(length=20),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('keywords', 'id',
               existing_type=sa.String(length=36),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('keywords', 'intent')
    op.drop_column('keywords', 'competitive_density')
    op.drop_column('keywords', 'keyword_difficulty')
    op.create_table('keyword_rankings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('position', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('search_volume', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('clicks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('impressions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ctr', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('date_tracked', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('keyword_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['keyword_id'], ['keywords.id'], name=op.f('keyword_rankings_keyword_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('keyword_rankings_pkey'))
    )
    op.create_index(op.f('ix_keyword_rankings_id'), 'keyword_rankings', ['id'], unique=False)
    # ### end Alembic commands ###
